#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
from pathlib import Path

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º index.html –∏ ZombieTrain.html —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã)
html_files = [
    'WitchBound.html',
    'RicochetMaster.html', 
    'QuantumStrike.html',
    'pythonbot.html',
    'novel.html',
    'monsterevolution.html',
    'MCP.html',
    'levels.html',
    'DronMl.html',
    'die2win.html'
]

# –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
translations = {
    '–ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—é–º–µ': 'Back to Resume',
    '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ': 'Project Details',
    '–°—Ç–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞': 'Project Stack',
    '–û–ø–∏—Å–∞–Ω–∏–µ': 'Description',
    '–ù–∞–≤—ã–∫–∏': 'Skills',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'Education',
    '–Ø–∑—ã–∫–∏': 'Languages',
    '–ò–Ω—Ç–µ—Ä–µ—Å—ã': 'Interests',
    '–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': 'Cross-platform development',
    'Middle Unity-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫': 'Middle Unity Developer',
    '–ù–∏–∫–∏—Ç–∞ –ò—â–µ–Ω–∫–æ': 'Nikita Ishchenko',
    '–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫': 'Novocherkassk',
    '–ù–ü–ò': 'NPI',
    '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (–±–∞–∫–∞–ª–∞–≤—Ä)': 'Computer Science and Engineering (Bachelor)',
    '(–Ω–∞ —É—Ä–æ–≤–Ω–µ —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)': '(documentation reading level)',
    '–ù–µ–π—Ä–æ—Å–µ—Ç–∏': 'Neural Networks',
    '–ë–æ—Ç—ã –¥–ª—è Telegram –∏ Discord': 'Telegram and Discord bots',
    '3D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ': '3D modeling',
    '–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å': 'Work capacity',
    '–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å': 'Stress resistance',
    '–ë—ã—Å—Ç—Ä–∞—è –æ–±—É—á–∞–µ–º–æ—Å—Ç—å': 'Fast learning',
    '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ': 'Critical thinking',
    '–°–∞–º–æ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': 'Self-organization',
    'UniTask (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)': 'UniTask (asynchronous programming)',
    '–°–µ—Ç–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è': 'Networking Solutions',
    'WebGL –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞': 'WebGL platform',
    '–ò–ò & ML': 'AI & ML',
    'Roslyn (–∫–æ–º–ø–∏–ª—è—Ü–∏—è C# –∫–æ–¥–∞)': 'Roslyn (C# code compilation)',
    '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è OpenAI API': 'OpenAI API integration',
    'UI & –ì—Ä–∞—Ñ–∏–∫–∞': 'UI & Graphics',
    'UI Toolkit (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)': 'UI Toolkit (basic level)',
    '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'Tools',
    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ': 'Additional',
    'Python (–±–æ—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è)': 'Python (bots, automation)',
    'JavaScript (–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)': 'JavaScript (web development)',
    'API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è': 'API integration',
    '–ú—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': 'Multiplatform development'
}

def add_language_toggle_to_file(filepath):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —è–∑—ã–∫–æ–≤–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫ HTML —Ñ–∞–π–ª—É"""
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filepath}")
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º CSS —Ñ–∞–π–ª —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if 'language-toggle.css' not in content:
        content = content.replace(
            '<link href="assets/css/dark-mode.css" rel="stylesheet"/>',
            '<link href="assets/css/dark-mode.css" rel="stylesheet"/>\n<link rel="stylesheet" href="assets/css/language-toggle.css">'
        )
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
    if 'language-toggle' not in content:
        language_toggle_html = '''
<!-- Language Toggle -->
<div class="language-toggle">
   <span class="lang-icon ru-icon">RU</span>
   <label class="switch">
      <input type="checkbox" id="languageToggle">
      <span class="slider"></span>
   </label>
   <span class="lang-icon en-icon">EN</span>
</div>'''
        
        content = content.replace(
            '</div>\n<div class="area">',
            f'</div>{language_toggle_html}\n<div class="area">'
        )
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º JS —Å–∫—Ä–∏–ø—Ç
    if 'language-toggle.js' not in content:
        content = content.replace(
            '<script src="assets/js/dark-mode.js"></script>',
            '<script src="assets/js/dark-mode.js"></script>\n<script src="assets/js/language-toggle.js"></script>'
        )
    
    # 4. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —è–∑—ã–∫–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    for ru_text, en_text in translations.items():
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if ru_text in content and f'<span class="ru-text">{ru_text}</span>' not in content:
            content = content.replace(
                ru_text,
                f'<span class="ru-text">{ru_text}</span>\n   <span class="en-text">{en_text}</span>'
            )
    
    # 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏–º—è –≤ header
    content = re.sub(
        r'<h2 class="resume-name mb-0 text-uppercase">([^<]+)</h2>',
        r'<h2 class="resume-name mb-0 text-uppercase">\n   <span class="ru-text">\1</span>\n   <span class="en-text">Nikita Ishchenko</span>\n</h2>',
        content
    )
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    content = re.sub(
        r'<div class="resume-tagline mb-3 mb-md-0">([^<]+)</div>',
        r'<div class="resume-tagline mb-3 mb-md-0">\n   <span class="ru-text">\1</span>\n   <span class="en-text">Middle Unity Developer</span>\n</div>',
        content
    )
    
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥
    content = re.sub(
        r'<i class="fas fa-map-marker-alt fa-fw fa-lg me-2"></i>([^<\n]+)',
        r'<i class="fas fa-map-marker-alt fa-fw fa-lg me-2"></i>\n<span class="ru-text">\1</span>\n<span class="en-text">Novocherkassk</span>',
        content
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ –§–∞–π–ª {filepath} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø—Ä–æ–µ–∫—Ç–æ–≤...")
    
    for filename in html_files:
        if os.path.exists(filename):
            add_language_toggle_to_file(filename)
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –Ø–∑—ã–∫–æ–≤–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ –≤—Å–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.")
    print("üîß –¢–µ–ø–µ—Ä—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏.")

if __name__ == '__main__':
    main() 