#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Å–µ–∫—Ü–∏–π –º–µ–∂–¥—É index.html –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–≤—ã–∫–∏, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —è–∑—ã–∫–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ footer.
"""

import os
import glob
from bs4 import BeautifulSoup, NavigableString
import argparse
from typing import List


class HTMLSyncer:
    def __init__(self, source_file: str = "index.html"):
        self.source_file = source_file
        self.source_soup = None
        
        # –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        self.sections_to_sync = [
            {
                'name': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
                'selector': '.resume-contact',
                'parent_selector': None
            },
            {
                'name': '–û–ø–∏—Å–∞–Ω–∏–µ', 
                'selector': '.resume-intro',
                'parent_selector': None
            },
            {
                'name': '–ù–∞–≤—ã–∫–∏',
                'selector': 'aside .skills-section',
                'parent_selector': 'aside'
            },
            {
                'name': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'selector': 'aside .education-section', 
                'parent_selector': 'aside'
            },
            {
                'name': '–Ø–∑—ã–∫–∏',
                'selector': 'aside .skills-section:has(h3:contains("–Ø–∑—ã–∫–∏"))',
                'parent_selector': 'aside'
            },
            {
                'name': '–ò–Ω—Ç–µ—Ä–µ—Å—ã',
                'selector': 'aside .skills-section:has(h3:contains("–ò–Ω—Ç–µ—Ä–µ—Å—ã"))',
                'parent_selector': 'aside'
            },
            {
                'name': 'Footer',
                'selector': '.resume-footer',
                'parent_selector': None
            }
        ]

    def load_source(self) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.source_file, 'r', encoding='utf-8') as f:
                self.source_soup = BeautifulSoup(f.read(), 'html.parser')
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {self.source_file}: {e}")
            return False

    def get_section_content(self, selector: str) -> BeautifulSoup:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if not self.source_soup:
            return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        if '–Ø–∑—ã–∫–∏' in selector:
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–Ø–∑—ã–∫–∏"
            h3_tags = self.source_soup.find_all('h3')
            for h3 in h3_tags:
                if '–Ø–∑—ã–∫–∏' in h3.get_text():
                    return h3.find_parent('section')
        elif '–ò–Ω—Ç–µ—Ä–µ—Å—ã' in selector:
            # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–ò–Ω—Ç–µ—Ä–µ—Å—ã"
            h3_tags = self.source_soup.find_all('h3')
            for h3 in h3_tags:
                if '–ò–Ω—Ç–µ—Ä–µ—Å—ã' in h3.get_text():
                    return h3.find_parent('section')
        else:
            element = self.source_soup.select_one(selector)
            return element
        
        return None

    def find_target_files(self) -> List[str]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ HTML —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ"""
        all_files = glob.glob("*.html")
        return [f for f in all_files if f != self.source_file]

    def sync_file(self, target_file: str) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª"""
        try:
            with open(target_file, 'r', encoding='utf-8') as f:
                target_soup = BeautifulSoup(f.read(), 'html.parser')

            changes_made = False
            
            for section_info in self.sections_to_sync:
                source_element = self.get_section_content(section_info['selector'])
                if not source_element:
                    print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å–µ–∫—Ü–∏—è {section_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ")
                    continue

                # –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Ü–µ–ª–µ–≤–æ–º —Ñ–∞–π–ª–µ  
                if '–Ø–∑—ã–∫–∏' in section_info['selector']:
                    h3_tags = target_soup.find_all('h3')
                    target_element = None
                    for h3 in h3_tags:
                        if '–Ø–∑—ã–∫–∏' in h3.get_text():
                            target_element = h3.find_parent('section')
                            break
                elif '–ò–Ω—Ç–µ—Ä–µ—Å—ã' in section_info['selector']:
                    h3_tags = target_soup.find_all('h3')
                    target_element = None
                    for h3 in h3_tags:
                        if '–ò–Ω—Ç–µ—Ä–µ—Å—ã' in h3.get_text():
                            target_element = h3.find_parent('section')
                            break
                else:
                    target_element = target_soup.select_one(section_info['selector'])

                if target_element:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    new_element = BeautifulSoup(str(source_element), 'html.parser').find()
                    target_element.replace_with(new_element)
                    changes_made = True
                    print(f"  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {section_info['name']}")
                else:
                    print(f"  ‚ö† –°–µ–∫—Ü–∏—è {section_info['name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {target_file}")

            if changes_made:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open(target_file, 'w', encoding='utf-8') as f:
                    f.write(str(target_soup))
                return True
            else:
                print(f"  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è {target_file}")
                return False

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {target_file}: {e}")
            return False

    def sync_all(self) -> None:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã"""
        if not self.load_source():
            return

        target_files = self.find_target_files()
        if not target_files:
            print("–¶–µ–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(target_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        for file in target_files:
            print(f"  ‚Ä¢ {file}")

        print("\n–ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        
        successful = 0
        for target_file in target_files:
            print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {target_file}...")
            if self.sync_file(target_file):
                successful += 1

        print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {successful}/{len(target_files)} —Ñ–∞–π–ª–æ–≤")

    def show_sections(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ"""
        if not self.load_source():
            return
            
        print(f"üìã –°–µ–∫—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ {self.source_file}:")
        for section_info in self.sections_to_sync:
            element = self.get_section_content(section_info['selector'])
            status = "‚úÖ –ù–∞–π–¥–µ–Ω–∞" if element else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞"
            print(f"  {section_info['name']}: {status}")


def main():
    parser = argparse.ArgumentParser(description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü")
    parser.add_argument('--source', default='index.html', help='–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: index.html)')
    parser.add_argument('--show-sections', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏')
    
    args = parser.parse_args()
    
    syncer = HTMLSyncer(args.source)
    
    if args.show_sections:
        syncer.show_sections()
    else:
        syncer.sync_all()


if __name__ == "__main__":
    main() 